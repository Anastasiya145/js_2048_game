{"version":3,"sources":["scripts/main.js"],"names":["buttonStart","document","querySelector","messageStart","messageWin","messageLose","gameScoreForUser","cells","querySelectorAll","rows","game","board","isUserWin","totalScore","getRandomCell","Math","round","random","getRandomValue","addNumber","coords","value","children","innerHTML","classList","add","startGame","clearGameBoard","map","cell","restartGame","clearTimeout","remove","move","codeOfEvent","areAllCellsFull","every","textContent","moveUpOrDown","moveLeftOrRight","setTimeout","verifyStatusGame","direction","j","length","column","i","push","mergeRowsAndColumns","filter","reverse","fillTheBoardByColumns","getPreparedRowsAndColumns","dataToMerge","row","fillTheBoardByRows","checkIfGameOver","allCellsAreFull","isHorizontalMoveExist","checkIfHorizontalMoveExist","isVerticalMoveExist","checkIfVerticalMoveExist","some","nextElementSibling","checkIfUserWon","line","isMerged","lineWithoutZeros","targetCell","columnWithoutZeros","addEventListener","ev","code"],"mappings":"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","file":"main.77330e59.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst buttonStart = document.querySelector('.start');\r\nconst messageStart = document.querySelector('.message-start');\r\nconst messageWin = document.querySelector('.message-win');\r\nconst messageLose = document.querySelector('.message-lose');\r\nconst gameScoreForUser = document.querySelector('.game-score');\r\n\r\nconst cells = document.querySelectorAll('.field-cell');\r\nconst rows = document.querySelectorAll('.field-row');\r\n\r\nconst game = {\r\n  board: [\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n  ],\r\n  isUserWin: false,\r\n  totalScore: 0,\r\n};\r\n\r\nfunction getRandomCell() {\r\n  const x = (Math.round(Math.random() * 3));\r\n  const y = (Math.round(Math.random() * 3));\r\n\r\n  return [x, y];\r\n}\r\n\r\nfunction getRandomValue() {\r\n  return Math.random() > 0.9 ? 4 : 2;\r\n}\r\n\r\nfunction addNumber() {\r\n  let coords = getRandomCell();\r\n\r\n  const value = getRandomValue();\r\n\r\n  while (game.board[coords[0]][coords[1]] !== 0) {\r\n    coords = getRandomCell();\r\n  };\r\n\r\n  game.board[coords[0]][coords[1]] = value;\r\n\r\n  [...rows][coords[0]].children[coords[1]].innerHTML = value;\r\n\r\n  [...rows][coords[0]].children[coords[1]].classList\r\n    .add(`field-cell--${value}`);\r\n};\r\n\r\nfunction startGame() {\r\n  addNumber();\r\n  addNumber();\r\n\r\n  buttonStart.innerHTML = 'Restart';\r\n  buttonStart.classList = 'button restart';\r\n\r\n  messageStart.classList.add('hidden', true);\r\n};\r\n\r\nfunction clearGameBoard() {\r\n  [...cells].map(cell => {\r\n    cell.innerHTML = '';\r\n    cell.classList = 'field-cell';\r\n  });\r\n\r\n  game.board = [\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n  ];\r\n}\r\n\r\nfunction restartGame() {\r\n  clearGameBoard();\r\n\r\n  clearTimeout(addNumber);\r\n\r\n  game.totalScore = 0;\r\n  gameScoreForUser.innerHTML = game.totalScore;\r\n\r\n  game.isUserWin = false;\r\n\r\n  buttonStart.innerHTML = 'Start';\r\n  buttonStart.classList = 'button start';\r\n  messageStart.classList.remove('hidden');\r\n  messageLose.classList.add('hidden', true);\r\n  messageWin.classList.add('hidden', true);\r\n};\r\n\r\nbuttonStart.addEventListener('click', (ev) => {\r\n  return (buttonStart.innerHTML === 'Start')\r\n    ? startGame()\r\n    : restartGame();\r\n});\r\n\r\ndocument.addEventListener('keyup', (ev) => {\r\n  move(ev.code);\r\n});\r\n\r\nfunction move(codeOfEvent) {\r\n  if (buttonStart.innerHTML !== 'Start') {\r\n    const areAllCellsFull = [...cells].every(cell => cell.textContent);\r\n\r\n    switch (codeOfEvent) {\r\n      case 'ArrowUp':\r\n        moveUpOrDown('up');\r\n        break;\r\n\r\n      case 'ArrowDown':\r\n        moveUpOrDown('down');\r\n        break;\r\n\r\n      case 'ArrowLeft':\r\n        moveLeftOrRight('left');\r\n        break;\r\n\r\n      case 'ArrowRight':\r\n        moveLeftOrRight('right');\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    if (!areAllCellsFull) {\r\n      setTimeout(addNumber, '200');\r\n    }\r\n\r\n    verifyStatusGame();\r\n  }\r\n};\r\n\r\nfunction moveUpOrDown(direction) {\r\n  for (let j = 0; j < game.board.length; j++) {\r\n    let column = [];\r\n\r\n    for (let i = 0; i < game.board.length; i++) {\r\n      column.push(game.board[i][j]);\r\n    }\r\n\r\n    column = (direction === 'up')\r\n      ? column.filter(cell => cell !== 0)\r\n      : column.filter(cell => cell !== 0).reverse();\r\n\r\n    mergeRowsAndColumns(column);\r\n\r\n    const preparedColumn = getPreparedRowsAndColumns(column, direction);\r\n\r\n    fillTheBoardByColumns(j, preparedColumn);\r\n\r\n    column.length = 0;\r\n  }\r\n}\r\n\r\nfunction moveLeftOrRight(direction) {\r\n  const dataToMerge = [...game.board];\r\n\r\n  for (let j = 0; j < dataToMerge.length; j++) {\r\n    const row = (direction === 'left')\r\n      ? dataToMerge[j].filter(cell => cell !== 0)\r\n      : dataToMerge[j].filter(cell => cell !== 0).reverse();\r\n\r\n    mergeRowsAndColumns(row);\r\n\r\n    game.board[j] = getPreparedRowsAndColumns(row, direction);\r\n\r\n    fillTheBoardByRows(j);\r\n  };\r\n};\r\n\r\nfunction checkIfGameOver() {\r\n  const allCellsAreFull = [...cells].every(cell => cell.textContent);\r\n  const isHorizontalMoveExist = checkIfHorizontalMoveExist();\r\n  const isVerticalMoveExist = checkIfVerticalMoveExist();\r\n\r\n  if (allCellsAreFull && !isHorizontalMoveExist && !isVerticalMoveExist) {\r\n    messageLose.classList.remove('hidden');\r\n  }\r\n};\r\n\r\nfunction checkIfHorizontalMoveExist() {\r\n  return [...cells].some(cell =>\r\n    cell.textContent && cell.nextElementSibling && cell.textContent\r\n    === cell.nextElementSibling.textContent);\r\n};\r\n\r\nfunction checkIfVerticalMoveExist() {\r\n  for (let i = 4; i < [...cells].length; i++) {\r\n    if ([...cells][i].textContent\r\n      && [...cells][i].textContent === [...cells][i - 4].textContent) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\nfunction checkIfUserWon() {\r\n  if ([...cells].some(cell => cell.innerHTML === '2048')) {\r\n    messageWin.classList.remove('hidden');\r\n  }\r\n};\r\n\r\nfunction verifyStatusGame() {\r\n  checkIfUserWon();\r\n  checkIfGameOver();\r\n};\r\n\r\nfunction mergeRowsAndColumns(line) {\r\n  let isMerged = false;\r\n\r\n  for (let i = 0; i < line.length - 1; i++) {\r\n    if (line[i] === 0) {\r\n      line[i] = line[i + 1];\r\n      line[i + 1] = 0;\r\n    } else {\r\n      if (line[i] === line[i + 1] && isMerged === false) {\r\n        line[i] *= 2;\r\n        game.totalScore += line[i];\r\n        gameScoreForUser.innerHTML = game.totalScore;\r\n        line[i + 1] = 0;\r\n        isMerged = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction getPreparedRowsAndColumns(line, direction) {\r\n  const lineWithoutZeros = line.filter(cell => cell !== 0);\r\n\r\n  while (lineWithoutZeros.length < game.board.length) {\r\n    lineWithoutZeros.push(0);\r\n  }\r\n\r\n  return (direction === 'left' || direction === 'up')\r\n    ? lineWithoutZeros\r\n    : lineWithoutZeros.reverse();\r\n};\r\n\r\nfunction fillTheBoardByRows(j) {\r\n  for (let i = 0; i < game.board[j].length; i++) {\r\n    const targetCell = [...rows][j].children[i];\r\n\r\n    if (game.board[j][i] !== 0) {\r\n      targetCell.classList.remove(`field-cell--${targetCell.textContent}`);\r\n      targetCell.innerHTML = game.board[j][i];\r\n      targetCell.classList.add(`field-cell--${targetCell.textContent}`);\r\n    } else {\r\n      targetCell.classList.remove(`field-cell--${targetCell.textContent}`);\r\n      targetCell.innerHTML = '';\r\n    }\r\n  }\r\n};\r\n\r\nfunction fillTheBoardByColumns(j, columnWithoutZeros) {\r\n  for (let i = 0; i < columnWithoutZeros.length; i++) {\r\n    game.board[i][j] = columnWithoutZeros[i];\r\n\r\n    const targetCell = [...rows][i].children[j];\r\n\r\n    if (game.board[i][j] !== 0) {\r\n      targetCell.classList.remove(`field-cell--${targetCell.textContent}`);\r\n      targetCell.innerHTML = columnWithoutZeros[i];\r\n      targetCell.classList.add(`field-cell--${targetCell.textContent}`);\r\n    } else {\r\n      targetCell.classList.remove(`field-cell--${targetCell.textContent}`);\r\n      targetCell.innerHTML = '';\r\n    }\r\n  }\r\n}\r\n"]}